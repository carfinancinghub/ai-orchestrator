*** a/api/routes.py
--- b/api/routes.py
@@
-from fastapi import APIRouter, Body
+from fastapi import APIRouter, Body
+from pathlib import Path
+from pydantic import BaseModel
@@
 @router.post("/build_ts", tags=["convert"], name="build_ts")
 def build_ts(req: BuildTsReq = Body(...)) -> dict:
@@
-    return {
-        "ok": len(errors) == 0,
-        "written": out_paths,
-        "errors": errors,
-        "label": req.label or "",
-    }
+    # Derive an output directory from the first written file (parent folder)
+    out_dir = ""
+    try:
+        if out_paths:
+            first_parent = Path(out_paths[0]).parent
+            out_dir = (
+                str((Path.cwd() / first_parent).resolve())
+                if not first_parent.is_absolute()
+                else str(first_parent)
+            )
+    except Exception:
+        out_dir = ""
+
+    return {
+        "ok": len(errors) == 0,
+        "written": out_paths,
+        "errors": errors,
+        "label": req.label or "",
+        "out_dir": out_dir,
+    }
@@
 # === END: /convert/prep ===
 
+# === BEGIN: /prune (pilot keep-all) ===
+class PruneReq(BaseModel):
+    md_paths: list[str] = []
+    strategy: str = "keep_all"           # later: "gemini"
+    out_csv: str | None = None           # default: reports/prune/pruned_module_map.csv
+    reason: str | None = "pilot keep-all"
+
+@router.post("/prune", tags=["convert"], name="prune")
+def prune(req: PruneReq) -> dict:
+    """
+    Pilot prune: write CSV 'path,action,reason' marking each .md as keep.
+    Keeps your current flow; later we can swap strategy to LLM-backed consolidation.
+    """
+    reports_dir = Path(os.getenv("REPORTS_DIR", "reports"))
+    prune_dir = reports_dir / "prune"
+    prune_dir.mkdir(parents=True, exist_ok=True)
+    out_csv = Path(req.out_csv) if req.out_csv else (prune_dir / "pruned_module_map.csv")
+
+    paths: list[str] = []
+    for p in req.md_paths:
+        try:
+            pp = Path(p)
+            if pp.exists() and pp.is_file():
+                paths.append(str(pp.resolve()))
+        except Exception:
+            continue
+    paths = sorted(set(paths))
+
+    with out_csv.open("w", encoding="utf-8", newline="") as f:
+        f.write("path,action,reason\n")
+        for p in paths:
+            f.write(f"\"{p}\",keep,\"{req.reason or 'pilot keep-all'}\"\n")
+
+    return {"ok": True, "strategy": req.strategy, "count": len(paths), "csv": out_csv.as_posix()}
+# === END: /prune ===
