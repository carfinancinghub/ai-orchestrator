**********************
PowerShell transcript start
Start time: 20251015001848
Username: Agasi\Agasi5
RunAs User: Agasi\Agasi5
Configuration Name: 
Machine: AGASI (Microsoft Windows NT 10.0.26200.0)
Host Application: C:\Program Files\PowerShell\7\pwsh.dll -WorkingDirectory ~
Process ID: 22004
PSVersion: 7.5.3
PSEdition: Core
GitCommitId: 7.5.3
OS: Microsoft Windows 10.0.26200
Platform: Win32NT
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1, 6.0, 7.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
WSManStackVersion: 3.0
**********************
PS C:\c\ai-orchestrator> Set-Location C:\CFH\frontend
PS C:\CFH\frontend> # Target only real source (exclude generated _ai_out)
PS C:\CFH\frontend> $files = Get-ChildItem -Path .\src -Recurse -Include *.ts,*.tsx | Where-Object { $_.FullName -notlike "*\src\_ai_out\*" }
PS C:\CFH\frontend> clear
PS C:\CFH\frontend> # === paths / logging ===
PS C:\CFH\frontend> $RepoRoot = "C:\c\ai-orchestrator"
PS C:\CFH\frontend> $Front    = "C:\CFH\frontend"
PS C:\CFH\frontend> $stamp    = (Get-Date).ToString("yyyyMMdd_HHmmss")
PS C:\CFH\frontend> $LogDir   = Join-Path $RepoRoot "reports\logs"
PS C:\CFH\frontend> New-Item -ItemType Directory -Force -Path $LogDir | Out-Null
PS C:\CFH\frontend> $LogPath  = Join-Path $LogDir "sanitize_$stamp.log"
PS C:\CFH\frontend> # capture everything to file (keeps the tab light)
PS C:\CFH\frontend> Start-Transcript -Path $LogPath -Append | Out-Null
PS C:\CFH\frontend> # stop dev server so no locks
PS C:\CFH\frontend> Stop-Process -Name node -ErrorAction SilentlyContinue
PS C:\CFH\frontend> Set-Location $Front
PS C:\CFH\frontend> # gather candidate files (skip generated output and tests for now)
PS C:\CFH\frontend> $files = Get-ChildItem -Path .\src -Recurse -Include *.ts,*.tsx `
  | Where-Object {
      $_.FullName -notlike "*\src\_ai_out\*" -and
      $_.Length -lt 1.5MB # avoid massive files
    }
PS C:\CFH\frontend> # only touch files that actually contain backticks or code fences or obvious prose at the top
PS C:\CFH\frontend> $candidates = foreach ($f in $files) {
  try {
    $firstKB = -join ((Get-Content -LiteralPath $f.FullName -TotalCount 200) -as [string[]])
    if ($firstKB -match '```|`' -or $firstKB -match '^\s*This conversion uses|^\s*Example:') { $f }
  } catch { }
}
PS C:\CFH\frontend> "Sanitizing $($candidates.Count) file(s)..." | Tee-Object -FilePath $LogPath -Append | Out-Null
>> TerminatingError(out-file): "The process cannot access the file 'C:\c\ai-orchestrator\reports\logs\sanitize_20251015_002020.log' because it is being used by another process."
out-file: The process cannot access the file 'C:\c\ai-orchestrator\reports\logs\sanitize_20251015_002020.log' because it is being used by another process.
out-file: The process cannot access the file 'C:\c\ai-orchestrator\reports\logs\sanitize_20251015_002020.log' because it is being used by another process.
PS C:\CFH\frontend> clear
PS C:\CFH\frontend> # You already have $RepoRoot, $Front, $LogDir, $stamp, $LogPath, and an active Transcript.
PS C:\CFH\frontend> # Use a separate file for Tee/output so it doesn't collide with Start-Transcript
PS C:\CFH\frontend> $RunLog = Join-Path $LogDir "sanitize_run_$stamp.log"
PS C:\CFH\frontend> # Recompute candidates if needed
PS C:\CFH\frontend> Set-Location $Front
PS C:\CFH\frontend> $files = Get-ChildItem -Path .\src -Recurse -Include *.ts,*.tsx |
  Where-Object { $_.FullName -notlike "*\src\_ai_out\*" -and $_.Length -lt 1.5MB }
PS C:\CFH\frontend> $candidates = foreach ($f in $files) {
  try {
    $firstKB = -join ((Get-Content -LiteralPath $f.FullName -TotalCount 200) -as [string[]])
    if ($firstKB -match '```|`' -or $firstKB -match '^\s*This conversion uses|^\s*Example:') { $f }
  } catch { }
}
PS C:\CFH\frontend> "Sanitizing $($candidates.Count) file(s)..." | Tee-Object -FilePath $RunLog -Append | Out-Null
PS C:\CFH\frontend> clear
PS C:\CFH\frontend> # assume $RepoRoot,$Front,$LogDir,$stamp,$LogPath,$RunLog still set
PS C:\CFH\frontend> Set-Location $Front
PS C:\CFH\frontend> # keep the list small: utils + auction components + files you saw in errors
PS C:\CFH\frontend> $targets = @(
  "src\utils\useAuth.ts",
  "src\utils\auction\auctionExportUtils.ts",
  "src\components\auction\*.*",
  "src\components\admin\AdminAuctionOverview.*",
  "src\components\auction\AuctionIntelligenceDashboard.*",
  "src\components\auction\AuctionLiveBidTracker.*",
  "src\components\auction\AuctionPremiumInsightsPanel.*",
  "src\components\auction\AuctionSEOHead.*"
) | ForEach-Object { Get-Item -Path $_ -ErrorAction SilentlyContinue } | Where-Object { $_ -ne $null }
PS C:\CFH\frontend> "Targeted sanitize count: $($targets.Count)" | Tee-Object -FilePath $RunLog -Append | Out-Null
PS C:\CFH\frontend> function Sanitize-File($path) {
  try {
    $txt = [System.IO.File]::ReadAllText($path)

    # Drop fenced markdown blocks
    $new = [regex]::Replace($txt, '(?s)```.*?```', '')

    # Trim everything before the first real TS token
    $m = [regex]::Match($new, '^\s*(import|export|const|let|function|interface|type|class)\b', 'IgnoreCase, Multiline')
    if ($m.Success -and $m.Index -gt 0) { $new = $new.Substring($m.Index) }

    if ($new -ne $txt) {
      [System.IO.File]::WriteAllText($path, $new, (New-Object System.Text.UTF8Encoding($false)))
      "Sanitized: $path"
    } else {
      "Unchanged: $path"
    }
  } catch {
    "SKIP (error): $path -> $($_.Exception.Message)"
  }
}
PS C:\CFH\frontend> foreach ($f in $targets) {
  (Sanitize-File $f.FullName) | Tee-Object -FilePath $RunLog -Append | Out-Null
}
PS C:\CFH\frontend> $useAuth = Join-Path $Front 'src\utils\useAuth.ts'
PS C:\CFH\frontend> if (Test-Path $useAuth) {
  $raw = Get-Content -Raw -LiteralPath $useAuth
  if ($raw -match '```|This conversion uses') {
@"
import { useEffect, useState } from 'react';

type UseAuthState = {
  token: string | null;
  userId: string | null;
  loading: boolean;
};

export function useAuth(): UseAuthState {
  const [token, setToken] = useState<string | null>(null);
  const [userId, setUserId] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    try {
      const t = localStorage.getItem('cfh_auth_token');
      const u = localStorage.getItem('cfh_user_id');
      setToken(t);
      setUserId(u);
    } finally {
      setLoading(false);
    }
  }, []);

  return { token, userId, loading };
}
"@ | Set-Content -Encoding UTF8 -LiteralPath $useAuth
    "Rewrote minimal hook: $useAuth" | Tee-Object -FilePath $RunLog -Append | Out-Null
  }
}
PS C:\CFH\frontend> try {
  npx tsc --noEmit | Tee-Object -FilePath (Join-Path $LogDir "tsc_$stamp.log") | Out-Null
} catch {
  "tsc failed: $($_.Exception.Message)" | Tee-Object -FilePath $RunLog -Append | Out-Null
}
PS C:\CFH\frontend> Stop-Transcript | Out-Null
