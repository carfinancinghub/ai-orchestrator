"""
Path: core/converters/base.py
Converter interface + a no-op DummyConverter for scaffolding.
"""
from __future__ import annotations
from dataclasses import dataclass
from datetime import datetime, timezone
from pathlib import Path
from typing import Optional, Tuple

HEADER_TS = """// Converted by AI-Orchestrator\n// Source: {src}\n// Timestamp: {ts}\n// Note: This is a scaffold. Replace `any` with strict types.\n"""


@dataclass
class ConversionResult:
    ts_code: str
    test_code: Optional[str]


class Converter:
    def convert(self, src_code: str, src_path: Path, generate_tests: bool = True) -> ConversionResult:  # pragma: no cover (interface)
        raise NotImplementedError


class DummyConverter(Converter):
    """Simple placeholder: wraps code with a header and renames extension.
    Why: keeps pipeline working before wiring real LLM(s) or ts-migrate.
    """

    def convert(self, src_code: str, src_path: Path, generate_tests: bool = True) -> ConversionResult:
        ts = datetime.now(timezone.utc).isoformat()
        header = HEADER_TS.format(src=str(src_path), ts=ts)
        # naive: keep code as-is, add a minimal TS hint
        body = src_code
        if "export default" in body and "as any" not in body:
            body += "\n// FIXME: add explicit types instead of `any`\n"
        ts_code = header + body
        test_code = None
        if generate_tests:
            test_code = (
                """// Basic scaffold test generated by AI-Orchestrator\nimport { describe, it, expect } from 'vitest'\n\ndescribe('scaffold', () => {\n  it('smoke', () => {\n    expect(1 + 1).toBe(2)\n  })\n})\n"""
            )
        return ConversionResult(ts_code=ts_code, test_code=test_code)

