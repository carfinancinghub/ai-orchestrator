name: CI

on:
  push:
    branches: [ main, fix/**, feat/** ]
    paths:
      - 'app/**'
      - 'core/**'
      - 'tools/**'
      - 'scripts/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '**/*.py'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'core/**'
      - 'tools/**'
      - 'scripts/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '**/*.py'
      - '.github/workflows/ci.yml'

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    # Only run if this repo looks like Python (extra safety on top of path filters)
    if: >
      !cancelled() &&
      (
        hashFiles('requirements.txt') != '' ||
        hashFiles('pyproject.toml')  != ''  ||
        hashFiles('**/*.py')         != ''
      )
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Enforce that no vendored/artifact paths are tracked
      - name: No vendor/artifact files tracked
        shell: pwsh
        run: pwsh -NoProfile -ExecutionPolicy Bypass -File scripts/check-no-vendor.ps1

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Install deps (requirements.txt)
        if: hashFiles('requirements.txt') != ''
        run: python -m pip install -r requirements.txt

      # Ruff only if we have config or python files
      - name: Ruff
        if: >
          hashFiles('pyproject.toml')  != '' ||
          hashFiles('ruff.toml')       != '' ||
          hashFiles('**/*.py')         != ''
        run: |
          python -m pip install ruff
          python -m ruff check .

      # Mypy only if config or python files are present (soft fail while stabilizing)
      - name: Mypy (soft fail while stabilizing)
        if: >
          hashFiles('mypy.ini')        != '' ||
          hashFiles('setup.cfg')       != '' ||
          hashFiles('pyproject.toml')  != '' ||
          hashFiles('**/*.py')         != ''
        run: |
          python -m pip install mypy types-requests
          # Keep CI green while types stabilize
          python -m mypy app core tools --ignore-missing-imports || echo "mypy soft fail (ignored)"

      # Pytest only if there are tests or config
      - name: Pytest
        if: >
          hashFiles('pytest.ini')      != '' ||
          hashFiles('pyproject.toml')  != '' ||
          hashFiles('**/tests/**')     != '' ||
          hashFiles('**/test_*.py')    != '' ||
          hashFiles('**/*_test.py')    != ''
        run: |
          python -m pip install pytest
          python -m pytest -q
  probes:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install deps & start orchestrator (background)
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          uvicorn app.server:create_app --factory --host 127.0.0.1 --port 8121 --log-level warning &
          echo $! > uvicorn.pid
          # simple wait for boot
          for i in $(seq 1 30); do
            if curl -fsS http://127.0.0.1:8121/_health >/dev/null; then break; fi
            sleep 1
          done

      - name: Probe endpoints
        run: |
          set -euo pipefail
          curl -fsS http://127.0.0.1:8121/_health
          curl -fsS http://127.0.0.1:8121/_meta/routes > routes.json
          test $(python - <<'PY'
          import json; print(len(json.load(open("routes.json"))["routes"]))
          PY
          ) -ge 1
          curl -fsS http://127.0.0.1:8121/readyz > readyz.json
          python - <<'PY'
          import json, sys
          j = json.load(open("readyz.json"))
          assert j.get("ok") is True, "readyz.ok != true"
          checks = j.get("checks", {})
          enabled = set(checks.get("providers_enabled", []))
          if not (("grok" in enabled) or checks.get("sdk_grok_xai") is True):
              raise SystemExit("grok provider not enabled in readyz")
          print("readyz OK; grok present")
          PY

      - name: Teardown
        if: always()
        run: |
          if [ -f uvicorn.pid ]; then kill $(cat uvicorn.pid) || true; fi

