# api/routes.py
from __future__ import annotations

import json
import os
import time
import uuid
from pathlib import Path
from typing import Optional, Dict, Any, List

from fastapi import APIRouter, Body, Query

from app.ops import fetch_candidates, process_batch

router = APIRouter()

# NOTE: no /health here; app.main defines /health and /healthz.

@router.post("/run-one", summary="Run One")
def run_one(
    body: Optional[Dict[str, Any]] = Body(default=None),
    prompt_key: Optional[str] = Query(default=None),
    tier: str = Query(default="free"),
    root: Optional[str] = Query(default=None),
    org: Optional[str] = Query(default=None),
    user: Optional[str] = Query(default=None),
    repo_name: Optional[str] = Query(default=None),
    platform: str = Query(default="github"),
    branches: str = Query(default="main"),
    batch_offset: int = Query(default=0),
    batch_limit: int = Query(default=100),
):
    t0 = time.time()

    params: Dict[str, Any] = dict(body or {})
    for k, v in {
        "prompt_key": prompt_key,
        "tier": tier,
        "root": root,
        "user": user,
        "org": org,
        "repo_name": repo_name,
        "platform": platform,
        "branches": branches,
        "batch_offset": batch_offset,
        "batch_limit": batch_limit,
    }.items():
        if k not in params or params[k] in (None, ""):
            params[k] = v

    account = params.get("user") or params.get("org") or ""
    run_id = uuid.uuid4().hex[:8]
    token = os.getenv("GITHUB_TOKEN") if params["platform"] == "github" else os.getenv("GITLAB_TOKEN")

    branch_list: List[str] = [b.strip() for b in (params.get("branches") or "main").split(",") if b.strip()]

    cands, bundles, repos = fetch_candidates(
        org=None,
        user=account,
        repo_name=params.get("repo_name"),
        platform=params["platform"],
        token=token,
        run_id=run_id,
        branches=branch_list,
        local_inventory_paths=[params.get("root")] if params.get("root") else None,
    )

    scan_path = Path("reports") / f"scan_{run_id}.json"
    found_total = None
    found_js_jsx = None
    try:
        scan = json.loads(scan_path.read_text(encoding="utf-8"))
        found_total = int(scan.get("found_total")) if isinstance(scan.get("found_total"), int) else None
        found_js_jsx = int(scan.get("found_js_jsx")) if isinstance(scan.get("found_js_jsx"), int) else None
    except Exception:
        found_total = None
        found_js_jsx = len(cands) if cands is not None else None

    elapsed_sec = round(time.time() - t0, 2)
    prefix_env = os.getenv("CFH_SCAN_PATH_PREFIXES")

    if params.get("prompt_key") == "convert" and params.get("tier") == "wow":
        res = process_batch(
            platform=params["platform"],
            token=token,
            candidates=cands,
            bundle_by_src=bundles,
            run_id=run_id,
            batch_offset=int(params.get("batch_offset") or 0),
            batch_limit=int(params.get("batch_limit") or 100),
        )
        return {
            "ok": True,
            "run_id": run_id,
            "processed": len(res),
            "found_total": found_total,
            "found_js_jsx": found_js_jsx,
            "branches": branch_list,
            "path_prefixes": prefix_env.split(",") if prefix_env else None,
            "elapsed_sec": elapsed_sec,
        }

    return {
        "ok": True,
        "run_id": run_id,
        "candidates": len(cands),
        "found_total": found_total,
        "found_js_jsx": found_js_jsx,
        "branches": branch_list,
        "path_prefixes": prefix_env.split(",") if prefix_env else None,
        "elapsed_sec": elapsed_sec,
    }
