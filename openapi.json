{"openapi":"3.1.0","info":{"title":"AI Orchestrator","version":"0.1.0"},"paths":{"/debug/provider":{"post":{"summary":"Set Provider","operationId":"set_provider_debug_provider_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProviderPayload"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Set Provider Debug Provider Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/orchestrator/run-stage/generate":{"post":{"summary":"Run Generate","description":"Accepts empty body (tests POST with no JSON).\nWrites an in-memory 'artifact' whose first line begins with 'ECHO: ' or 'UPPER: '.","operationId":"run_generate_orchestrator_run_stage_generate_post","requestBody":{"content":{"application/json":{"schema":{"anyOf":[{"$ref":"#/components/schemas/GenerateRequest"},{"type":"null"}],"title":"Req"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Run Generate Orchestrator Run Stage Generate Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/orchestrator/artifacts/generate":{"get":{"summary":"Get Generate Artifact","operationId":"get_generate_artifact_orchestrator_artifacts_generate_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Get Generate Artifact Orchestrator Artifacts Generate Get"}}}}}}},"/audit/js/plan":{"post":{"summary":"Audit Plan","description":"Minimal planner to satisfy tests:\n- keep_ts_tsx: count .ts/.tsx in the markdown inventories\n- convert_candidates_in_root: .js/.jsx whose parent == workspace_root\n- must return 'plan_path' (.txt) and 'csv_path' (.csv)","operationId":"audit_plan_audit_js_plan_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PlanRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Audit Plan Audit Js Plan Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/audit/js/dry-run":{"post":{"summary":"Audit Dry Run","description":"Tests expect 'preview_count' and 'preview_path' (endswith .txt)","operationId":"audit_dry_run_audit_js_dry_run_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DryRunRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Audit Dry Run Audit Js Dry Run Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/audit/js/convert":{"post":{"summary":"Audit Convert","description":"Minimal converter: maps .js->.ts and .jsx->.tsx in-place.\nIf write=True, creates target files with a tiny scaffold.","operationId":"audit_convert_audit_js_convert_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConvertRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Audit Convert Audit Js Convert Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/audit/js/commit":{"post":{"summary":"Audit Commit","description":"Minimal commit stub for tests.\nReturns 200 with summary; counts how many target TS/TSX files already exist.","operationId":"audit_commit_audit_js_commit_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommitRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Audit Commit Audit Js Commit Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/_health":{"get":{"summary":"Health","operationId":"health__health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Health  Health Get"}}}}}}},"/orchestrator/status":{"get":{"summary":"Orchestrator Status","operationId":"orchestrator_status_orchestrator_status_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/_meta/routes":{"get":{"summary":"List Routes","operationId":"list_routes__meta_routes_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}}},"components":{"schemas":{"CommitRequest":{"properties":{"plan_path":{"type":"string","title":"Plan Path"},"dry_run":{"type":"boolean","title":"Dry Run","default":true}},"type":"object","required":["plan_path"],"title":"CommitRequest"},"ConvertRequest":{"properties":{"plan_path":{"type":"string","title":"Plan Path"},"write":{"type":"boolean","title":"Write","default":false},"force":{"type":"boolean","title":"Force","default":false},"max_files":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Max Files"}},"type":"object","required":["plan_path"],"title":"ConvertRequest"},"DryRunRequest":{"properties":{"plan_path":{"type":"string","title":"Plan Path"},"max_files":{"type":"integer","title":"Max Files","default":50}},"type":"object","required":["plan_path"],"title":"DryRunRequest"},"GenerateRequest":{"properties":{"messages":{"anyOf":[{"items":{"additionalProperties":true,"type":"object"},"type":"array"},{"type":"null"}],"title":"Messages"}},"type":"object","title":"GenerateRequest"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"PlanRequest":{"properties":{"md_paths":{"items":{"type":"string"},"type":"array","title":"Md Paths"},"workspace_root":{"type":"string","title":"Workspace Root"},"size_min_bytes":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Size Min Bytes"},"exclude_regex":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Exclude Regex"},"same_dir_only":{"type":"boolean","title":"Same Dir Only","default":false}},"type":"object","required":["md_paths","workspace_root"],"title":"PlanRequest"},"ProviderPayload":{"properties":{"provider":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Provider"}},"type":"object","title":"ProviderPayload"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}
